import { MonomerType, PresetType } from '@utils/types';
import { Sugar } from './Sugars';
import { Base } from './Bases';
import { Phosphate } from './Phosphates';

export const Preset = {
  A: {
    alias: 'A',
    testId: 'A_A_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.A,
    phosphate: Phosphate.P,
  } as PresetType,
  C: {
    alias: 'C',
    testId: 'C_C_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.C,
    phosphate: Phosphate.P,
  } as PresetType,
  G: {
    alias: 'G',
    testId: 'G_G_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.G,
    phosphate: Phosphate.P,
  } as PresetType,
  T: {
    alias: 'T',
    testId: 'T_T_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.T,
    phosphate: Phosphate.P,
  } as PresetType,
  U: {
    alias: 'U',
    testId: 'U_U_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.U,
    phosphate: Phosphate.P,
  } as PresetType,
  dR_U_P: {
    alias: 'dR(U)P',
    testId: 'dR(U)P_U_dR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.dR,
    base: Base.U,
    phosphate: Phosphate.P,
  } as PresetType,
  dR_5meC_P: {
    alias: 'dR(5meC)P',
    testId: 'dR(5meC)P_5meC_dR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.dR,
    base: Base._5meC,
    phosphate: Phosphate.P,
  } as PresetType,
  _12ddR__P: {
    alias: '12ddR()P',
    testId: '12ddR()P_._12ddR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar._12ddR,
    phosphate: Phosphate.P,
  } as PresetType,
  dR_In_P: {
    alias: 'dR(In)P',
    testId: 'dR(In)P_In_dR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.dR,
    base: Base.In,
    phosphate: Phosphate.P,
  } as PresetType,
  dR_isoG_P: {
    alias: 'dR(isoG)P',
    testId: 'dR(isoG)P_isoG_dR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.dR,
    base: Base.isoG,
    phosphate: Phosphate.P,
  } as PresetType,
  fR_U_P: {
    alias: 'fR(U)P',
    testId: 'fR(U)P_U_fR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.fR,
    base: Base.U,
    phosphate: Phosphate.P,
  } as PresetType,
  fR_C_P: {
    alias: 'fR(C)P',
    testId: 'fR(C)P_C_fR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.fR,
    base: Base.C,
    phosphate: Phosphate.P,
  } as PresetType,
  fR_A_P: {
    alias: 'fR(A)P',
    testId: 'fR(A)P_A_fR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.fR,
    base: Base.A,
    phosphate: Phosphate.P,
  } as PresetType,
  fR_G_P: {
    alias: 'fR(G)P',
    testId: 'fR(G)P_G_fR_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.fR,
    base: Base.G,
    phosphate: Phosphate.P,
  } as PresetType,
  R_meA_P: {
    alias: 'R(meA)P',
    testId: 'R(meA)P_meA_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.meA,
    phosphate: Phosphate.P,
  } as PresetType,
  R_In_P: {
    alias: 'R(In)P',
    testId: 'R(In)P_In_R_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.In,
    phosphate: Phosphate.P,
  } as PresetType,
  R_G: {
    alias: 'R(G)',
    testId: 'R(G)_G_R_.',
    monomerType: MonomerType.Preset,
    sugar: Sugar.R,
    base: Base.G,
  } as PresetType,
  MOE_A_P: {
    alias: 'MOE(A)P',
    testId: 'MOE(A)P_A_MOE_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.MOE,
    base: Base.A,
    phosphate: Phosphate.P,
  } as PresetType,
  MOE_5meC_P: {
    alias: 'MOE(5meC)P',
    testId: 'MOE(5meC)P_5meC_MOE_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.MOE,
    base: Base._5meC,
    phosphate: Phosphate.P,
  } as PresetType,
  MOE_G_P: {
    alias: 'MOE(G)P',
    testId: 'MOE(G)P_G_MOE_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.MOE,
    base: Base.G,
    phosphate: Phosphate.P,
  } as PresetType,
  MOE_T_P: {
    alias: 'MOE(T)P',
    testId: 'MOE(T)P_T_MOE_P',
    monomerType: MonomerType.Preset,
    sugar: Sugar.MOE,
    base: Base.T,
    phosphate: Phosphate.P,
  } as PresetType,
  MyRNA: {
    alias: 'MyRNA',
    testId: 'MyRNA_baA_25R_bP',
    monomerType: MonomerType.Preset,
    sugar: Sugar._25R,
    base: Base.baA,
    phosphate: Phosphate.bP,
  } as PresetType,
  // for library update test, doesn't exist initially
  _A1: {
    alias: '_A1',
    testId: '_A1_Base1_Sugar1_Phosphate1',
    monomerType: MonomerType.Preset,
    sugar: Sugar.Sugar,
    base: Base.Base,
    phosphate: Phosphate.Phosphate,
  } as PresetType,
  _A2: {
    alias: '_A1',
    testId: '_A2_Base1_Sugar1_Phosphate1',
    monomerType: MonomerType.Preset,
    sugar: Sugar.Sugar,
    base: Base.Base,
    phosphate: Phosphate.Phosphate,
  } as PresetType,
  _A3: {
    alias: '_A3',
    testId: '_A3_Base1_Sugar1_Phosphate1',
    monomerType: MonomerType.Preset,
    sugar: Sugar.Sugar,
    base: Base.Base,
    phosphate: Phosphate.Phosphate,
  } as PresetType,
};

export type PresetsType = typeof Preset;
